import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;

public class bffs {
  static class Edge {
    int src;
    int dest;

    public Edge(int s, int d) {
      this.src = s;
      this.dest = d;
    }
  }

  public static void createGraph(ArrayList<Edge>[] graph) {
    for (int i = 0; i < graph.length; i++) {
      graph[i] = new ArrayList<Edge>();
    }

    graph[0].add(new Edge(0, 1));
    graph[0].add(new Edge(0, 2));

    graph[1].add(new Edge(1, 0));
    graph[1].add(new Edge(1, 3));

    graph[2].add(new Edge(2, 0));
    graph[2].add(new Edge(2, 4));

    graph[3].add(new Edge(3, 1));
    graph[3].add(new Edge(3, 4));
    graph[3].add(new Edge(3, 5));

    graph[4].add(new Edge(4, 2));
    graph[4].add(new Edge(4, 3));
    graph[4].add(new Edge(4, 5));

    graph[5].add(new Edge(5, 3));
    graph[5].add(new Edge(5, 4));
    graph[5].add(new Edge(5, 6));

    graph[6].add(new Edge(6, 5));
  }

  public static void bfs(ArrayList<Edge>[] graph, int v) {
    Queue<Integer> q = new LinkedList<>();
    boolean[] vis = new boolean[v];
    q.add(0);
    vis[0] = true; // mark the starting node as visited

    while (!q.isEmpty()) {
      int curr = q.poll();
      System.out.print(curr + " ");

      for (int i = 0; i < graph[curr].size(); i++) {   // for finding current node neighbour 
        Edge e = graph[curr].get(i);
        if (!vis[e.dest]) {
          q.add(e.dest);
          vis[e.dest] = true; // mark the node as visited when it is enqueued
        }
      }
    }
  }

  public static void main(String[] args) {
    int v = 7;
    ArrayList<Edge>[] graph = new ArrayList[v];
    createGraph(graph);
    bfs(graph, v);
    System.out.println();
  }
}
